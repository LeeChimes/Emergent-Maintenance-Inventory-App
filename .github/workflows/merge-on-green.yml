---
name: Merge on green (squash)

"on":
  workflow_run:
    workflows: ["Android E2E (Detox)"]
    types: ["completed"]

jobs:
  merge:
    name: Auto-merge PRs after successful E2E tests
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Auto-merge PRs on successful E2E
        uses: actions/github-script@v7
        with:
          script: |
            console.log('üöÄ Starting merge-on-green workflow');
            const conclusion = context.payload.workflow_run.conclusion;
            const runId = context.payload.workflow_run.id;
            console.log(`Workflow run conclusion: ${conclusion}`);
            console.log(`Workflow run ID: ${runId}`);

            // Get pull requests associated with this workflow run
            const pullRequests = context.payload.workflow_run.pull_requests || [];
            console.log(`Found ${pullRequests.length} associated pull request(s)`);

            if (pullRequests.length === 0) {
              console.log('‚ùå No pull requests associated with this workflow run, skipping merge');
              return;
            }

            // Process each pull request
            for (const pr of pullRequests) {
              console.log(`\nüìã Processing PR #${pr.number}: ${pr.title}`);

              try {
                // Fetch detailed PR information
                const { data: pullRequest } = await github.rest.pulls.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number
                });

                console.log(`PR state: ${pullRequest.state}`);
                console.log(`PR draft: ${pullRequest.draft}`);
                console.log(`PR base branch: ${pullRequest.base.ref}`);

                // Validate PR is eligible for merge
                if (pullRequest.state !== 'open') {
                  const state = pullRequest.state;
                  console.log(`‚ùå Skipping PR #${pr.number}: not open (state: ${state})`);
                  continue;
                }

                if (pullRequest.draft) {
                  console.log(`‚ùå Skipping PR #${pr.number}: is draft`);
                  continue;
                }

                if (pullRequest.base.ref !== 'main') {
                  const baseRef = pullRequest.base.ref;
                  console.log(`‚ùå Skipping PR #${pr.number}: base branch is ${baseRef}, not main`);
                  continue;
                }

                // Check if PR is mergeable
                if (pullRequest.mergeable === false) {
                  console.log(`‚ùå Skipping PR #${pr.number}: has merge conflicts`);
                  continue;
                }

                if (pullRequest.mergeable === null) {
                  console.log(`‚ö†Ô∏è  PR #${pr.number}: mergeable state is unknown, proceeding anyway`);
                }

                console.log(`‚úÖ PR #${pr.number} is eligible for merge`);

                // Attempt to merge the PR
                console.log(`üîÑ Attempting to squash-merge PR #${pr.number}...`);

                const mergeResponse = await github.rest.pulls.merge({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  pull_number: pr.number,
                  commit_title: `${pullRequest.title} (#${pr.number})`,
                  commit_message: `Automatically merged by merge-on-green workflow after successful Android E2E tests.\n\n${pullRequest.body || ''}`,
                  merge_method: 'squash'
                });

                if (mergeResponse.data.merged) {
                  console.log(`üéâ Successfully squash-merged PR #${pr.number}`);
                  console.log(`Merge SHA: ${mergeResponse.data.sha}`);
                } else {
                  console.log(`‚ùå Failed to merge PR #${pr.number}: merge response indicates failure`);
                }

              } catch (error) {
                console.error(`‚ùå Error processing PR #${pr.number}:`, error.message);

                // Check if it's a specific merge error
                const is405Error = error.status === 405 && 
                  error.message.includes('Pull Request is not mergeable');
                const is409Error = error.status === 409 && 
                  error.message.includes('Head branch was modified');
                  
                if (is405Error) {
                  const reason = 'is not mergeable (likely missing required status checks or approvals)';
                  console.log(`   Reason: PR #${pr.number} ${reason}`);
                } else if (is409Error) {
                  console.log(`   Reason: PR #${pr.number} head branch was modified during merge attempt`);
                } else {
                  console.log(`   Full error details:`, error);
                }

                // Continue processing other PRs even if one fails
                continue;
              }
            }

            console.log('\nüèÅ Merge-on-green workflow completed');